@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    color-scheme: light dark;
  }

  body {
    @apply bg-default text-zinc-950 dark:text-zinc-200;
  }

  body,
  div,
  p,
  article {
    @apply scrollbar;
  }

  :is(input, textarea, select):disabled {
    @apply bg-zinc-100 opacity-80 dark:bg-zinc-800 dark:opacity-50;
  }

  [popover] {
    --popover-transition-timing-fn: cubic-bezier(0.32, 0.72, 0, 1);
    opacity: 0;
    transition:
      opacity,
      display allow-discrete,
      overlay allow-discrete;
    transition-duration: 200ms;
    transition-timing-function: var(--popover-transition-timing-fn);
  }

  [popover]:popover-open {
    opacity: 1;
  }

  @starting-style {
    [popover]:popover-open {
      @apply opacity-0;
    }
  }
}

@layer components {
  .button-base {
    @apply inline-flex items-center gap-2 rounded-md border px-2.5 py-2 align-top text-sm font-semibold leading-normal shadow-sm transition-colors focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-zinc-900 sm:px-3.5 sm:py-2.5 dark:focus-visible:outline-zinc-400;
  }

  button:disabled {
    @apply disabled;
  }

  .button {
    @apply button-base border-zinc-900 bg-zinc-900 text-white hover:bg-transparent hover:text-zinc-900 focus-visible:hover:border-transparent dark:border-transparent dark:bg-zinc-300 dark:text-black hover:dark:bg-zinc-100;
  }

  .button-secondary {
    @apply button-base border-zinc-200 bg-transparent text-inherit hover:border-zinc-900 hover:text-inherit dark:border-zinc-600 dark:hover:border-zinc-200;
  }

  .link {
    @apply px-2 py-1 transition-colors hover:rounded-md hover:bg-slate-200 dark:hover:bg-zinc-800;
  }

  .input {
    @apply block w-full rounded-lg border border-gray-300 bg-gray-50 p-2 text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-inherit dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500;
  }

  .input-error {
    @apply text-error border-current outline-current;
  }

  .input-warn {
    @apply border-yellow-500 text-inherit outline-yellow-500;
  }

  .input-form {
    /* if using native HTML form then only need &:not(:placeholder-shown):invalid */
    &:is(:not(:placeholder-shown/* not an empty input */, .ng-untouched.ng-invalid):invalid),
    &.ng-touched.ng-invalid {
      @apply input-error;
    }

    &:focus:is(:invalid, .ng-invalid) {
      /* Invalid but users are typing, so yellow instead of red (error) */
      @apply input-warn;
    }
  }

  .form-ctrl
    > :where(input, textarea, select):where(
      :not(:placeholder-shown, .ng-untouched.ng-invalid):invalid, /* if using native HTML form, only need :not(:placeholder-shown):invalid */
      .ng-touched.ng-invalid
    )
    ~ .error-msg {
    @apply visible;
  }

  .dialog {
    --dialog-animation-timing-fn: cubic-bezier(0.32, 0.72, 0, 1);
    --dialog-open-animation-duration: 400ms;
    --dialog-close-animation-duration: 200ms;

    @apply opacity-0 focus-visible:outline-none;

    transition:
      opacity var(--dialog-close-animation-duration),
      display var(--dialog-close-animation-duration) allow-discrete,
      overlay var(--dialog-close-animation-duration) allow-discrete;

    &::backdrop {
      @apply opacity-0 backdrop-blur-[2px];

      transition: inherit;
    }

    &[open],
    &[open]::backdrop {
      @apply opacity-100 duration-[var(--dialog-open-animation-duration)];
    }

    @starting-style {
      &[open] {
        @apply opacity-0 backdrop:opacity-0;
      }
    }
  }

  .bg-pattern {
    --pattern-dot-size: 2px;
    --pattern-dot-color: light-dark(#f1f5f9 /* slate-100 */, rgba(17, 24, 39, 0.5));
    --pattern-dot-space: calc(var(--pattern-dot-size) * 4);
    background-image: radial-gradient(
        circle at center,
        var(--pattern-dot-color) var(--pattern-dot-size),
        transparent 0
      ),
      radial-gradient(
        circle at center,
        var(--pattern-dot-color) var(--pattern-dot-size),
        transparent 0
      );
    background-size: calc(var(--pattern-dot-space) * 2) calc(var(--pattern-dot-space) * 2);
    background-position:
      0 0,
      var(--pattern-dot-space) var(--pattern-dot-space);
  }

  .bg-floating {
    @apply bg-default sm:rounded-lg sm:shadow-md dark:border dark:border-zinc-50/10 dark:shadow-none;
  }

  .scrollbar::-webkit-scrollbar {
    width: 16px;
  }

  .scrollbar::-webkit-scrollbar-track {
    background-color: transparent;
  }

  .scrollbar::-webkit-scrollbar-thumb {
    background-color: #d6dee1;
    border-radius: 16px;
    border: 4px solid transparent;
    background-clip: content-box;
  }

  .scrollbar::-webkit-scrollbar-thumb:hover {
    background-color: #a8bbbf;
  }

  .scrollbar-mac::-webkit-scrollbar-thumb {
    background-color: #babac0;
  }
}

@layer utilities {
  .disabled {
    @apply pointer-events-none cursor-not-allowed opacity-50;
  }

  .popover-slide-y {
    animation: slideOutUp 500ms var(--popover-transition-timing-fn) forwards;

    &:popover-open {
      animation: slideInDown 200ms var(--popover-transition-timing-fn) forwards;
    }
  }

  .bg-default {
    @apply bg-slate-50 dark:bg-zinc-950;
  }

  .text-error {
    @apply text-red-600 dark:text-red-500;
  }

  .transition-hidden {
    transition:
      opacity,
      transform,
      display allow-discrete;
    transition-duration: 400ms, 200ms, 200ms;
    transition-timing-function: cubic-bezier(0.32, 0.72, 0, 1);
  }

  @starting-style {
    .transition-hidden {
      @apply opacity-0;
    }
  }
}

@layer overrides {
  ng-icon {
    @apply !block !align-middle;
  }
}

@layer keyframes {
  @keyframes slideInDown {
    from {
      transform: translateY(-100%);
    }
  }

  @keyframes slideOutUp {
    to {
      transform: translateY(-100%);
    }
  }
}
